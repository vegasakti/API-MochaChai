{
  "stats": {
    "suites": 8,
    "tests": 21,
    "passes": 16,
    "pending": 0,
    "failures": 5,
    "start": "2023-06-29T16:37:47.458Z",
    "end": "2023-06-29T16:38:10.243Z",
    "duration": 22785,
    "testsRegistered": 21,
    "passPercent": 76.19047619047619,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7b5f74ec-553c-4523-8921-4691df7c815c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1733,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const resDelBookingID = await herokuApi.get_booking_id();\n//console.log(resGetBookingID);\n\nglobal.bookingId = resDelBookingID.data[getRandomInt(100)].bookingid;\n// console.log(bookingId);\n// console.log(getRandomInt(13));",
          "err": {},
          "uuid": "5ef623ed-cd47-435e-8f3f-4dac83291a20",
          "parentUUID": "7b5f74ec-553c-4523-8921-4691df7c815c",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1154,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const resGetBookingID = await herokuApi.get_booking_id();\n//console.log(resGetBookingID);\n\nglobal.bookingID = resGetBookingID.data[getRandomInt(13)].bookingid;\n//console.log(bookingID);\n//console.log(getRandomInt(13));",
          "err": {},
          "uuid": "3bf05eeb-89e7-44c8-9fb4-fe396ac35b53",
          "parentUUID": "7b5f74ec-553c-4523-8921-4691df7c815c",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "580cdf59-be4b-49aa-81ec-984afe7b9c46",
          "title": "As a User, I want to create auth token",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\auth.test.js",
          "file": "\\test\\scenario\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully create auth token",
              "fullTitle": "As a User, I want to create auth token should sucesfully create auth token",
              "timedOut": false,
              "duration": 939,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.auth(data.VALID_AUTH);\nassert.equal(response.status, 200);\nassert.isString(response.data.token);\n       // expect(response.data).to.be.jsonSchema(shcema.AUTH_SCHEMA);\nassert.jsonSchema(response.data, shcema.AUTH_SCHEMA);",
              "err": {},
              "uuid": "901b7336-33c8-4b0e-866f-a7daeb2d8749",
              "parentUUID": "580cdf59-be4b-49aa-81ec-984afe7b9c46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should failed create auth token",
              "fullTitle": "As a User, I want to create auth token should failed create auth token",
              "timedOut": false,
              "duration": 943,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.auth(data.INVALID_AUTH);\nassert.equal(response.status, 401);\nassert.jsonSchema(response.data, shcema.INVALID_AUTH_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 401",
                "estack": "AssertionError: expected 200 to equal 401\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/auth.test.js:25:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 401\n"
              },
              "uuid": "f1aaf14f-344a-44a1-b9df-bb3d779fe093",
              "parentUUID": "580cdf59-be4b-49aa-81ec-984afe7b9c46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "901b7336-33c8-4b0e-866f-a7daeb2d8749"
          ],
          "failures": [
            "f1aaf14f-344a-44a1-b9df-bb3d779fe093"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1882,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "674c410a-3f99-4d53-b12a-9ea7bc70cffb",
          "title": "booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\booking.test.js",
          "file": "\\test\\scenario\\booking.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully create booking",
              "fullTitle": "booking should sucesfully create booking",
              "timedOut": false,
              "duration": 980,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let booking =  {\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}\nconst response = await herokuApi.booking(data.CREATE);\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, CREATE_SCHEMA.JsonSchema);",
              "err": {
                "message": "AssertionError: expected 500 to equal 200",
                "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/booking.test.js:26:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "f2341c7f-6a59-40ef-9d9e-42a3a11ccc45",
              "parentUUID": "674c410a-3f99-4d53-b12a-9ea7bc70cffb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f2341c7f-6a59-40ef-9d9e-42a3a11ccc45"
          ],
          "pending": [],
          "skipped": [],
          "duration": 980,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "678b0e88-f89e-4940-ba89-27433031f39d",
          "title": "As a User, I want to delete an id",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\delete.test.js",
          "file": "\\test\\scenario\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucessfull delete booking ID",
              "fullTitle": "As a User, I want to delete an id should sucessfull delete booking ID",
              "timedOut": false,
              "duration": 968,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.delete();\nassert.equal(response.status, 201);\nassert.strictEqual(typeof response.data, 'string');",
              "err": {},
              "uuid": "1c988b95-05f9-4e33-ba7c-aab0a7d6063b",
              "parentUUID": "678b0e88-f89e-4940-ba89-27433031f39d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not sucessfull delete invalid booking ID",
              "fullTitle": "As a User, I want to delete an id should not sucessfull delete invalid booking ID",
              "timedOut": false,
              "duration": 901,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.delete();\nassert.equal(response.status, 405);\nassert.strictEqual(typeof response.data, 'string');",
              "err": {},
              "uuid": "81d218c0-7c77-46c6-9b84-611144ebb5d4",
              "parentUUID": "678b0e88-f89e-4940-ba89-27433031f39d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c988b95-05f9-4e33-ba7c-aab0a7d6063b",
            "81d218c0-7c77-46c6-9b84-611144ebb5d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1869,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "553cdbe3-2827-479f-aaad-6ff6e55a4aea",
          "title": "As a User, I want to get booking id",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\get.booking.id.test.js",
          "file": "\\test\\scenario\\get.booking.id.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully get booking id when insert a valid data",
              "fullTitle": "As a User, I want to get booking id should sucesfully get booking id when insert a valid data",
              "timedOut": false,
              "duration": 1274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.getBookingId();\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, shcema.BOOKINGID_SCHEMA);",
              "err": {},
              "uuid": "16cc8986-5ec8-429b-b264-a81334652b51",
              "parentUUID": "553cdbe3-2827-479f-aaad-6ff6e55a4aea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16cc8986-5ec8-429b-b264-a81334652b51"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1274,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c12c1cd7-0f4e-437b-8614-de3ff4738a0e",
          "title": "As a User, I want to get booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\get.booking.test.js",
          "file": "\\test\\scenario\\get.booking.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully get booking when insert a valid data",
              "fullTitle": "As a User, I want to get booking should sucesfully get booking when insert a valid data",
              "timedOut": false,
              "duration": 899,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.getBooking();\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, shcema.BOOKING_SCHEMA);",
              "err": {},
              "uuid": "b711ad57-05aa-430c-9527-f6419310f183",
              "parentUUID": "c12c1cd7-0f4e-437b-8614-de3ff4738a0e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b711ad57-05aa-430c-9527-f6419310f183"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 899,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
          "title": "Partial Update Booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\partial-update.test.js",
          "file": "\\test\\scenario\\partial-update.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Successfully update additional needs in current booking",
              "fullTitle": "Partial Update Booking Successfully update additional needs in current booking",
              "timedOut": false,
              "duration": 932,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_1);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_CASE_1.additionalneeds);",
              "err": {},
              "uuid": "50f5afe5-0750-487f-997e-18898d4adba0",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update firstname in current booking",
              "fullTitle": "Partial Update Booking Successfully update firstname in current booking",
              "timedOut": false,
              "duration": 973,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_2);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_2);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_CASE_2.firstname);",
              "err": {},
              "uuid": "468885a9-8cd7-4c5d-b51e-bdebcffe721f",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update lastname of in current booking",
              "fullTitle": "Partial Update Booking Successfully update lastname of in current booking",
              "timedOut": false,
              "duration": 984,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_3);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_3);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.lastname, data.PARTIAL_UPDATE_CASE_3.lastname);",
              "err": {},
              "uuid": "a583a96a-5e01-43a4-bfc2-f4acd3c4fdc2",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update total price in current booking",
              "fullTitle": "Partial Update Booking Successfully update total price in current booking",
              "timedOut": false,
              "duration": 846,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_4);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_4);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_CASE_4.totalprice);",
              "err": {},
              "uuid": "2a233ba3-4fb3-4efe-95c2-e7f644019c2f",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update status deposit paid in current booking",
              "fullTitle": "Partial Update Booking Successfully update status deposit paid in current booking",
              "timedOut": false,
              "duration": 947,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_5);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_5);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.depositpaid, data.PARTIAL_UPDATE_CASE_5.depositpaid);",
              "err": {},
              "uuid": "728fce91-c1b6-44e9-b739-778a9ed5a192",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update dates in current booking",
              "fullTitle": "Partial Update Booking Successfully update dates in current booking",
              "timedOut": false,
              "duration": 953,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_6);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_6);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.bookingdates[0], data.PARTIAL_UPDATE_CASE_6.bookingdates[0]);\nassert.equal(resPartialUpdate.data.bookingdates[1], data.PARTIAL_UPDATE_CASE_6.bookingdates[1]);",
              "err": {},
              "uuid": "81206b12-5d9c-4ffa-88a8-243b1c14cc3a",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update two data in current booking",
              "fullTitle": "Partial Update Booking Successfully update two data in current booking",
              "timedOut": false,
              "duration": 912,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_7.lastname);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_7);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_CASE_7.firstname);\nassert.equal(resPartialUpdate.data.lastname, data.PARTIAL_UPDATE_CASE_7.lastname);",
              "err": {},
              "uuid": "3b658496-1b5f-4da4-bde6-659c10452189",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update some data in current booking",
              "fullTitle": "Partial Update Booking Successfully update some data in current booking",
              "timedOut": false,
              "duration": 930,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_8);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_8);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_CASE_8.totalprice);\nassert.equal(resPartialUpdate.data.depositpaid, data.PARTIAL_UPDATE_CASE_8.depositpaid);\nassert.equal(resPartialUpdate.data.bookingdates[0], data.PARTIAL_UPDATE_CASE_8.bookingdates[0]);\nassert.equal(resPartialUpdate.data.bookingdates[1], data.PARTIAL_UPDATE_CASE_8.bookingdates[1]);\nassert.equal(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_CASE_8.additionalneeds);",
              "err": {},
              "uuid": "c9bcf176-34b0-4f6b-b8c2-7e8e87eef7f5",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully partial update with emptying some data",
              "fullTitle": "Partial Update Booking Successfully partial update with emptying some data",
              "timedOut": false,
              "duration": 848,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_EMPTY);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.isNull(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_EMPTY.firstname);\nassert.isNull(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_EMPTY.totalprice);\nassert.isNull(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_EMPTY.additionalneeds);",
              "err": {},
              "uuid": "5ebc8c2b-929c-4b76-afa3-a1e8b53a3361",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully partial update with emptying some data",
              "fullTitle": "Partial Update Booking Successfully partial update with emptying some data",
              "timedOut": false,
              "duration": 934,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_EMPTY);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.isNull(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_EMPTY.firstname);\nassert.isNull(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_EMPTY.totalprice);\nassert.isNull(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_EMPTY.additionalneeds);",
              "err": {},
              "uuid": "f8f1b31d-1e31-4899-98da-9ad5f401b418",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed partial update with invalid data",
              "fullTitle": "Partial Update Booking Failed partial update with invalid data",
              "timedOut": false,
              "duration": 900,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_INVALID_DATA);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 422);\nassert.equal(resPartialUpdate.statusText, \"Unprocessed Entity\");\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 422",
                "estack": "AssertionError: expected 200 to equal 422\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/partial-update.test.js:139:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 422\n"
              },
              "uuid": "0e428c7d-0bbf-4e1f-8d2b-e5ab3ebc1f22",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed partial update with invalid data",
              "fullTitle": "Partial Update Booking Failed partial update with invalid data",
              "timedOut": false,
              "duration": 999,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_INVALID_CHECKOUT);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 422);\nassert.equal(resPartialUpdate.statusText, \"Unprocessed Entity\");\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 422",
                "estack": "AssertionError: expected 200 to equal 422\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/partial-update.test.js:150:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 422\n"
              },
              "uuid": "c7a0bf32-7986-45ca-be0e-9e0733ac7f8e",
              "parentUUID": "d4d5b7f0-b4c6-403a-a995-a9afda2b8902",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "50f5afe5-0750-487f-997e-18898d4adba0",
            "468885a9-8cd7-4c5d-b51e-bdebcffe721f",
            "a583a96a-5e01-43a4-bfc2-f4acd3c4fdc2",
            "2a233ba3-4fb3-4efe-95c2-e7f644019c2f",
            "728fce91-c1b6-44e9-b739-778a9ed5a192",
            "81206b12-5d9c-4ffa-88a8-243b1c14cc3a",
            "3b658496-1b5f-4da4-bde6-659c10452189",
            "c9bcf176-34b0-4f6b-b8c2-7e8e87eef7f5",
            "5ebc8c2b-929c-4b76-afa3-a1e8b53a3361",
            "f8f1b31d-1e31-4899-98da-9ad5f401b418"
          ],
          "failures": [
            "0e428c7d-0bbf-4e1f-8d2b-e5ab3ebc1f22",
            "c7a0bf32-7986-45ca-be0e-9e0733ac7f8e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11158,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bc88d05b-6243-453f-80e4-e2ce7628b07d",
          "title": "Ping - Check Health",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\ping.test.js",
          "file": "\\test\\scenario\\ping.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Simple Health Check Endpoint is up and running",
              "fullTitle": "Ping - Check Health Verify Simple Health Check Endpoint is up and running",
              "timedOut": false,
              "duration": 892,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.ping();\nassert.equal(response.status, 201);\nassert.equal(response.statusText, \"Created\");",
              "err": {},
              "uuid": "a06e83d8-0041-442f-8d74-bf3e1448192e",
              "parentUUID": "bc88d05b-6243-453f-80e4-e2ce7628b07d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a06e83d8-0041-442f-8d74-bf3e1448192e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 892,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c566585c-3aa3-4322-8cca-2a192e32bcc7",
          "title": "updatebooking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\update.test.js",
          "file": "\\test\\scenario\\update.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully update booking",
              "fullTitle": "updatebooking should sucesfully update booking",
              "timedOut": false,
              "duration": 912,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let booking =  {\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}\nconst response = await herokuApi.booking(data.update_BOOKING);\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, UPDATE_SCHEMA2.JsonSchema);",
              "err": {
                "message": "AssertionError: expected 500 to equal 200",
                "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/update.test.js:28:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "ad471fd4-7179-40fb-a42e-f8cc7cdf545a",
              "parentUUID": "c566585c-3aa3-4322-8cca-2a192e32bcc7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ad471fd4-7179-40fb-a42e-f8cc7cdf545a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 912,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}