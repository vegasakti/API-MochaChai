{
  "stats": {
    "suites": 8,
    "tests": 21,
    "passes": 16,
    "pending": 0,
    "failures": 5,
    "start": "2023-05-15T10:36:55.736Z",
    "end": "2023-05-15T10:37:15.262Z",
    "duration": 19526,
    "testsRegistered": 21,
    "passPercent": 76.19047619047619,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c08b2198-fabf-496d-8114-94a52e8a42b0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1396,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const resDelBookingID = await herokuApi.get_booking_id();\n//console.log(resGetBookingID);\n\nglobal.bookingId = resDelBookingID.data[getRandomInt(100)].bookingid;\n// console.log(bookingId);\n// console.log(getRandomInt(13));",
          "err": {},
          "uuid": "209934e1-d70e-4eb9-846a-1b00c3af5290",
          "parentUUID": "c08b2198-fabf-496d-8114-94a52e8a42b0",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1248,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const resGetBookingID = await herokuApi.get_booking_id();\n//console.log(resGetBookingID);\n\nglobal.bookingID = resGetBookingID.data[getRandomInt(13)].bookingid;\n//console.log(bookingID);\n//console.log(getRandomInt(13));",
          "err": {},
          "uuid": "1828988f-45a9-48e5-8229-35a5d170da0e",
          "parentUUID": "c08b2198-fabf-496d-8114-94a52e8a42b0",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "369a16a7-e159-450e-b0eb-9b7f2f0ddb4a",
          "title": "As a User, I want to create auth token",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\auth.test.js",
          "file": "\\test\\scenario\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully create auth token",
              "fullTitle": "As a User, I want to create auth token should sucesfully create auth token",
              "timedOut": false,
              "duration": 765,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.auth(data.VALID_AUTH);\nassert.equal(response.status, 200);\nassert.isString(response.data.token);\n       // expect(response.data).to.be.jsonSchema(shcema.AUTH_SCHEMA);\nassert.jsonSchema(response.data, shcema.AUTH_SCHEMA);",
              "err": {},
              "uuid": "be430232-c2bc-4d1c-b105-15e825e6fcb5",
              "parentUUID": "369a16a7-e159-450e-b0eb-9b7f2f0ddb4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should failed create auth token",
              "fullTitle": "As a User, I want to create auth token should failed create auth token",
              "timedOut": false,
              "duration": 755,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.auth(data.INVALID_AUTH);\nassert.equal(response.status, 400);\nassert.jsonSchema(response.data, shcema.INVALID_AUTH_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/auth.test.js:25:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "16b097aa-6141-4e29-8884-0b2110485a33",
              "parentUUID": "369a16a7-e159-450e-b0eb-9b7f2f0ddb4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "be430232-c2bc-4d1c-b105-15e825e6fcb5"
          ],
          "failures": [
            "16b097aa-6141-4e29-8884-0b2110485a33"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1520,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1604ef21-c21c-48f7-b0fa-0120af06e261",
          "title": "booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\booking.test.js",
          "file": "\\test\\scenario\\booking.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully create booking",
              "fullTitle": "booking should sucesfully create booking",
              "timedOut": false,
              "duration": 802,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let booking =  {\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}\nconst response = await herokuApi.booking(data.VALID_BOOKING);\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, CREATE_SCHEMA.JsonSchema);",
              "err": {
                "message": "AssertionError: expected 500 to equal 200",
                "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/booking.test.js:26:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "ad0e4244-753d-4801-8941-677ce900391e",
              "parentUUID": "1604ef21-c21c-48f7-b0fa-0120af06e261",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ad0e4244-753d-4801-8941-677ce900391e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 802,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ddaa217d-06d0-47b8-88d6-c221b293bfc4",
          "title": "As a User, I want to delete an id",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\delete.test.js",
          "file": "\\test\\scenario\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucessfull delete booking ID",
              "fullTitle": "As a User, I want to delete an id should sucessfull delete booking ID",
              "timedOut": false,
              "duration": 813,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.delete();\nassert.equal(response.status, 201);\nassert.strictEqual(typeof response.data, 'string');",
              "err": {},
              "uuid": "399e7e59-b16c-47c1-9e18-9e5bc6754b12",
              "parentUUID": "ddaa217d-06d0-47b8-88d6-c221b293bfc4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not sucessfull delete invalid booking ID",
              "fullTitle": "As a User, I want to delete an id should not sucessfull delete invalid booking ID",
              "timedOut": false,
              "duration": 786,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.delete();\nassert.equal(response.status, 405);\nassert.strictEqual(typeof response.data, 'string');",
              "err": {},
              "uuid": "f714f64e-40ad-4f77-a3bd-be0ad1ef216e",
              "parentUUID": "ddaa217d-06d0-47b8-88d6-c221b293bfc4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "399e7e59-b16c-47c1-9e18-9e5bc6754b12",
            "f714f64e-40ad-4f77-a3bd-be0ad1ef216e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1599,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5ddff780-6223-4962-9486-983573417101",
          "title": "As a User, I want to get booking id",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\get.booking.id.test.js",
          "file": "\\test\\scenario\\get.booking.id.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully get booking id when insert a valid data",
              "fullTitle": "As a User, I want to get booking id should sucesfully get booking id when insert a valid data",
              "timedOut": false,
              "duration": 1021,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.getBookingId();\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, shcema.BOOKINGID_SCHEMA);",
              "err": {},
              "uuid": "e7c2bf48-e03d-4c6e-a57e-aec45fca8980",
              "parentUUID": "5ddff780-6223-4962-9486-983573417101",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e7c2bf48-e03d-4c6e-a57e-aec45fca8980"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1021,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3a8ed442-f974-4866-a695-19d89bf950ae",
          "title": "As a User, I want to get booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\get.booking.test.js",
          "file": "\\test\\scenario\\get.booking.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully get booking when insert a valid data",
              "fullTitle": "As a User, I want to get booking should sucesfully get booking when insert a valid data",
              "timedOut": false,
              "duration": 744,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.getBooking();\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, shcema.BOOKING_SCHEMA);",
              "err": {},
              "uuid": "76ce907e-aaef-49c2-a26a-9dbfea83c1dd",
              "parentUUID": "3a8ed442-f974-4866-a695-19d89bf950ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76ce907e-aaef-49c2-a26a-9dbfea83c1dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 744,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
          "title": "Partial Update Booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\partial-update.test.js",
          "file": "\\test\\scenario\\partial-update.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Successfully update additional needs in current booking",
              "fullTitle": "Partial Update Booking Successfully update additional needs in current booking",
              "timedOut": false,
              "duration": 766,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_1);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_CASE_1.additionalneeds);",
              "err": {},
              "uuid": "0517c603-cc83-44d4-9175-16d35e31103e",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update firstname in current booking",
              "fullTitle": "Partial Update Booking Successfully update firstname in current booking",
              "timedOut": false,
              "duration": 819,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_2);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_2);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_CASE_2.firstname);",
              "err": {},
              "uuid": "68749873-b64c-41a0-803b-46c8c4d39332",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update lastname of in current booking",
              "fullTitle": "Partial Update Booking Successfully update lastname of in current booking",
              "timedOut": false,
              "duration": 771,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_3);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_3);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.lastname, data.PARTIAL_UPDATE_CASE_3.lastname);",
              "err": {},
              "uuid": "3908b33b-e6db-4012-8374-750a9a1fe652",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update total price in current booking",
              "fullTitle": "Partial Update Booking Successfully update total price in current booking",
              "timedOut": false,
              "duration": 765,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_4);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_4);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_CASE_4.totalprice);",
              "err": {},
              "uuid": "99f5bb66-464b-4af4-be2e-5e29d3c712c8",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update status deposit paid in current booking",
              "fullTitle": "Partial Update Booking Successfully update status deposit paid in current booking",
              "timedOut": false,
              "duration": 793,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_5);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_5);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.depositpaid, data.PARTIAL_UPDATE_CASE_5.depositpaid);",
              "err": {},
              "uuid": "e5a4cee5-428f-4d30-b6bb-76d570e6ba45",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update dates in current booking",
              "fullTitle": "Partial Update Booking Successfully update dates in current booking",
              "timedOut": false,
              "duration": 735,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_6);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_6);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.bookingdates[0], data.PARTIAL_UPDATE_CASE_6.bookingdates[0]);\nassert.equal(resPartialUpdate.data.bookingdates[1], data.PARTIAL_UPDATE_CASE_6.bookingdates[1]);",
              "err": {},
              "uuid": "617b2046-480f-45e6-a26e-539e7a24c173",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update two data in current booking",
              "fullTitle": "Partial Update Booking Successfully update two data in current booking",
              "timedOut": false,
              "duration": 738,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_7.lastname);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_7);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_CASE_7.firstname);\nassert.equal(resPartialUpdate.data.lastname, data.PARTIAL_UPDATE_CASE_7.lastname);",
              "err": {},
              "uuid": "3c9ea7f8-0816-4898-bf39-1592fd934c86",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update some data in current booking",
              "fullTitle": "Partial Update Booking Successfully update some data in current booking",
              "timedOut": false,
              "duration": 741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_8);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_8);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_CASE_8.totalprice);\nassert.equal(resPartialUpdate.data.depositpaid, data.PARTIAL_UPDATE_CASE_8.depositpaid);\nassert.equal(resPartialUpdate.data.bookingdates[0], data.PARTIAL_UPDATE_CASE_8.bookingdates[0]);\nassert.equal(resPartialUpdate.data.bookingdates[1], data.PARTIAL_UPDATE_CASE_8.bookingdates[1]);\nassert.equal(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_CASE_8.additionalneeds);",
              "err": {},
              "uuid": "93c93211-4fc4-417c-837f-7a8d58cec75e",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully partial update with emptying some data",
              "fullTitle": "Partial Update Booking Successfully partial update with emptying some data",
              "timedOut": false,
              "duration": 835,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_EMPTY);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.isNull(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_EMPTY.firstname);\nassert.isNull(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_EMPTY.totalprice);\nassert.isNull(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_EMPTY.additionalneeds);",
              "err": {},
              "uuid": "bef7dd12-ae8d-46a2-a68b-db433dea3eec",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully partial update with emptying some data",
              "fullTitle": "Partial Update Booking Successfully partial update with emptying some data",
              "timedOut": false,
              "duration": 754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_EMPTY);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.isNull(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_EMPTY.firstname);\nassert.isNull(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_EMPTY.totalprice);\nassert.isNull(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_EMPTY.additionalneeds);",
              "err": {},
              "uuid": "a9add0c4-7963-47d4-81f7-ee6999986795",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed partial update with invalid data",
              "fullTitle": "Partial Update Booking Failed partial update with invalid data",
              "timedOut": false,
              "duration": 1136,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_INVALID_DATA);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 422);\nassert.equal(resPartialUpdate.statusText, \"Unprocessed Entity\");\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 422",
                "estack": "AssertionError: expected 200 to equal 422\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/partial-update.test.js:139:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 422\n"
              },
              "uuid": "97c7b613-bde8-4ead-94dc-a707bc19e6ea",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed partial update with invalid data",
              "fullTitle": "Partial Update Booking Failed partial update with invalid data",
              "timedOut": false,
              "duration": 765,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_INVALID_CHECKOUT);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 422);\nassert.equal(resPartialUpdate.statusText, \"Unprocessed Entity\");\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 422",
                "estack": "AssertionError: expected 200 to equal 422\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/partial-update.test.js:150:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 422\n"
              },
              "uuid": "ec287ba1-0241-4a83-a17a-d0af75aa4507",
              "parentUUID": "ab4ca872-87a9-40f0-924a-3d8f2e276833",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0517c603-cc83-44d4-9175-16d35e31103e",
            "68749873-b64c-41a0-803b-46c8c4d39332",
            "3908b33b-e6db-4012-8374-750a9a1fe652",
            "99f5bb66-464b-4af4-be2e-5e29d3c712c8",
            "e5a4cee5-428f-4d30-b6bb-76d570e6ba45",
            "617b2046-480f-45e6-a26e-539e7a24c173",
            "3c9ea7f8-0816-4898-bf39-1592fd934c86",
            "93c93211-4fc4-417c-837f-7a8d58cec75e",
            "bef7dd12-ae8d-46a2-a68b-db433dea3eec",
            "a9add0c4-7963-47d4-81f7-ee6999986795"
          ],
          "failures": [
            "97c7b613-bde8-4ead-94dc-a707bc19e6ea",
            "ec287ba1-0241-4a83-a17a-d0af75aa4507"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9618,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "770d1e9c-dcd4-4a2d-8351-4a06f2466f60",
          "title": "Ping - Check Health",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\ping.test.js",
          "file": "\\test\\scenario\\ping.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Simple Health Check Endpoint is up and running",
              "fullTitle": "Ping - Check Health Verify Simple Health Check Endpoint is up and running",
              "timedOut": false,
              "duration": 767,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.ping();\nassert.equal(response.status, 201);\nassert.equal(response.statusText, \"Created\");",
              "err": {},
              "uuid": "791d8036-e2cf-4d27-819c-c4d1531ce72c",
              "parentUUID": "770d1e9c-dcd4-4a2d-8351-4a06f2466f60",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "791d8036-e2cf-4d27-819c-c4d1531ce72c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 767,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6335cae1-a15b-4e9e-a0c7-936ccf70885d",
          "title": "updatebooking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\update.test.js",
          "file": "\\test\\scenario\\update.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully update booking",
              "fullTitle": "updatebooking should sucesfully update booking",
              "timedOut": false,
              "duration": 770,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let booking =  {\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}\nconst response = await herokuApi.booking(data.update_BOOKING);\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, UPDATE_SCHEMA2.JsonSchema);",
              "err": {
                "message": "AssertionError: expected 500 to equal 200",
                "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/update.test.js:28:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "2787d757-f696-4f1c-8b87-5b631b98801a",
              "parentUUID": "6335cae1-a15b-4e9e-a0c7-936ccf70885d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2787d757-f696-4f1c-8b87-5b631b98801a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 770,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}