{
  "stats": {
    "suites": 8,
    "tests": 21,
    "passes": 16,
    "pending": 0,
    "failures": 5,
    "start": "2023-06-29T16:57:05.612Z",
    "end": "2023-06-29T16:57:29.321Z",
    "duration": 23709,
    "testsRegistered": 21,
    "passPercent": 76.19047619047619,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d0315908-1423-4711-9b51-a52f99626e62",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1714,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const resDelBookingID = await herokuApi.get_booking_id();\n//console.log(resGetBookingID);\n\nglobal.bookingId = resDelBookingID.data[getRandomInt(100)].bookingid;\n// console.log(bookingId);\n// console.log(getRandomInt(13));",
          "err": {},
          "uuid": "0ce300a3-67f4-4346-90f3-2ad6f835d39d",
          "parentUUID": "d0315908-1423-4711-9b51-a52f99626e62",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1505,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const resGetBookingID = await herokuApi.get_booking_id();\n//console.log(resGetBookingID);\n\nglobal.bookingID = resGetBookingID.data[getRandomInt(13)].bookingid;\n//console.log(bookingID);\n//console.log(getRandomInt(13));",
          "err": {},
          "uuid": "e32897a4-6859-4f3a-a1cc-1ea096bd97af",
          "parentUUID": "d0315908-1423-4711-9b51-a52f99626e62",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "94384cf3-cf4d-4c13-90a9-4df4d815bc02",
          "title": "As a User, I want to create auth token",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\auth.test.js",
          "file": "\\test\\scenario\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully create auth token",
              "fullTitle": "As a User, I want to create auth token should sucesfully create auth token",
              "timedOut": false,
              "duration": 856,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.auth(data.VALID_AUTH);\nassert.equal(response.status, 200);\nassert.isString(response.data.token);\n       // expect(response.data).to.be.jsonSchema(shcema.AUTH_SCHEMA);\nassert.jsonSchema(response.data, shcema.AUTH_SCHEMA);",
              "err": {},
              "uuid": "c4037e0d-4b3c-4e4f-8de8-83ef6bb2fa44",
              "parentUUID": "94384cf3-cf4d-4c13-90a9-4df4d815bc02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should failed create auth token",
              "fullTitle": "As a User, I want to create auth token should failed create auth token",
              "timedOut": false,
              "duration": 889,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.auth(data.INVALID_AUTH);\nassert.equal(response.status, 401);\nassert.jsonSchema(response.data, shcema.INVALID_AUTH_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 401",
                "estack": "AssertionError: expected 200 to equal 401\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/auth.test.js:25:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 401\n"
              },
              "uuid": "39237b5f-21ba-4cd9-8e85-989a2c1f3af1",
              "parentUUID": "94384cf3-cf4d-4c13-90a9-4df4d815bc02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4037e0d-4b3c-4e4f-8de8-83ef6bb2fa44"
          ],
          "failures": [
            "39237b5f-21ba-4cd9-8e85-989a2c1f3af1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1745,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce460ad0-a177-4aee-89a2-dc66ba032ea1",
          "title": "booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\booking.test.js",
          "file": "\\test\\scenario\\booking.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully create booking",
              "fullTitle": "booking should sucesfully create booking",
              "timedOut": false,
              "duration": 943,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let booking =  {\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}\nconst response = await herokuApi.booking(data.CREATE);\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, CREATE_SCHEMA.JsonSchema);",
              "err": {
                "message": "AssertionError: expected 500 to equal 200",
                "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/booking.test.js:26:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "cf908d16-20a3-4e70-abd1-92f99f84d072",
              "parentUUID": "ce460ad0-a177-4aee-89a2-dc66ba032ea1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cf908d16-20a3-4e70-abd1-92f99f84d072"
          ],
          "pending": [],
          "skipped": [],
          "duration": 943,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "787f7064-c244-4f88-bc89-99e267b5864e",
          "title": "As a User, I want to delete an id",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\delete.test.js",
          "file": "\\test\\scenario\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucessfull delete booking ID",
              "fullTitle": "As a User, I want to delete an id should sucessfull delete booking ID",
              "timedOut": false,
              "duration": 886,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.delete();\nassert.equal(response.status, 201);\nassert.strictEqual(typeof response.data, 'string');",
              "err": {},
              "uuid": "0f1df8d9-f4e0-4f86-a9c2-02261367522a",
              "parentUUID": "787f7064-c244-4f88-bc89-99e267b5864e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not sucessfull delete invalid booking ID",
              "fullTitle": "As a User, I want to delete an id should not sucessfull delete invalid booking ID",
              "timedOut": false,
              "duration": 842,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.delete();\nassert.equal(response.status, 405);\nassert.strictEqual(typeof response.data, 'string');",
              "err": {},
              "uuid": "b6a3922d-2f71-476e-9e47-112db9c77708",
              "parentUUID": "787f7064-c244-4f88-bc89-99e267b5864e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f1df8d9-f4e0-4f86-a9c2-02261367522a",
            "b6a3922d-2f71-476e-9e47-112db9c77708"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1728,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1775ae47-b8ea-47a6-a28b-6fb05e323f62",
          "title": "As a User, I want to get booking id",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\get.booking.id.test.js",
          "file": "\\test\\scenario\\get.booking.id.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully get booking id when insert a valid data",
              "fullTitle": "As a User, I want to get booking id should sucesfully get booking id when insert a valid data",
              "timedOut": false,
              "duration": 1702,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.getBookingId();\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, shcema.BOOKINGID_SCHEMA);",
              "err": {},
              "uuid": "f8e490f9-f502-4264-9f59-5e1a59dffdbf",
              "parentUUID": "1775ae47-b8ea-47a6-a28b-6fb05e323f62",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f8e490f9-f502-4264-9f59-5e1a59dffdbf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1702,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "abf620f1-1777-4ab9-941a-37843a0c0bfa",
          "title": "As a User, I want to get booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\get.booking.test.js",
          "file": "\\test\\scenario\\get.booking.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully get booking when insert a valid data",
              "fullTitle": "As a User, I want to get booking should sucesfully get booking when insert a valid data",
              "timedOut": false,
              "duration": 1025,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.getBooking();\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, shcema.BOOKING_SCHEMA);",
              "err": {},
              "uuid": "8bb09134-d921-4291-9981-3face27d5ca1",
              "parentUUID": "abf620f1-1777-4ab9-941a-37843a0c0bfa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8bb09134-d921-4291-9981-3face27d5ca1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1025,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "efbfb5bb-860d-407c-9239-46052b292c57",
          "title": "Partial Update Booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\partial-update.test.js",
          "file": "\\test\\scenario\\partial-update.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Successfully update additional needs in current booking",
              "fullTitle": "Partial Update Booking Successfully update additional needs in current booking",
              "timedOut": false,
              "duration": 942,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_1);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_CASE_1.additionalneeds);",
              "err": {},
              "uuid": "339dd53a-b7d8-4615-88e0-944d9277a53c",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update firstname in current booking",
              "fullTitle": "Partial Update Booking Successfully update firstname in current booking",
              "timedOut": false,
              "duration": 956,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_2);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_2);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_CASE_2.firstname);",
              "err": {},
              "uuid": "8986b10e-9a64-472d-8591-704cac125b96",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update lastname of in current booking",
              "fullTitle": "Partial Update Booking Successfully update lastname of in current booking",
              "timedOut": false,
              "duration": 923,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_3);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_3);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.lastname, data.PARTIAL_UPDATE_CASE_3.lastname);",
              "err": {},
              "uuid": "c9405b02-1d10-41fb-9555-cbd8e9e0f8f6",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update total price in current booking",
              "fullTitle": "Partial Update Booking Successfully update total price in current booking",
              "timedOut": false,
              "duration": 995,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_4);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_4);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_CASE_4.totalprice);",
              "err": {},
              "uuid": "6eeebdbb-6973-466e-a5cb-dec96b2db162",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update status deposit paid in current booking",
              "fullTitle": "Partial Update Booking Successfully update status deposit paid in current booking",
              "timedOut": false,
              "duration": 1013,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_5);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_5);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.depositpaid, data.PARTIAL_UPDATE_CASE_5.depositpaid);",
              "err": {},
              "uuid": "1af7d61b-bae4-41aa-8211-6ac6356af928",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update dates in current booking",
              "fullTitle": "Partial Update Booking Successfully update dates in current booking",
              "timedOut": false,
              "duration": 915,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_6);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_6);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.bookingdates[0], data.PARTIAL_UPDATE_CASE_6.bookingdates[0]);\nassert.equal(resPartialUpdate.data.bookingdates[1], data.PARTIAL_UPDATE_CASE_6.bookingdates[1]);",
              "err": {},
              "uuid": "57e67145-2e97-4b09-8813-9f83d40f1516",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update two data in current booking",
              "fullTitle": "Partial Update Booking Successfully update two data in current booking",
              "timedOut": false,
              "duration": 872,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_7.lastname);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_7);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_CASE_7.firstname);\nassert.equal(resPartialUpdate.data.lastname, data.PARTIAL_UPDATE_CASE_7.lastname);",
              "err": {},
              "uuid": "6223b2fb-7268-4c1a-87f4-50a8fa85b640",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update some data in current booking",
              "fullTitle": "Partial Update Booking Successfully update some data in current booking",
              "timedOut": false,
              "duration": 979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_8);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_8);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_CASE_8.totalprice);\nassert.equal(resPartialUpdate.data.depositpaid, data.PARTIAL_UPDATE_CASE_8.depositpaid);\nassert.equal(resPartialUpdate.data.bookingdates[0], data.PARTIAL_UPDATE_CASE_8.bookingdates[0]);\nassert.equal(resPartialUpdate.data.bookingdates[1], data.PARTIAL_UPDATE_CASE_8.bookingdates[1]);\nassert.equal(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_CASE_8.additionalneeds);",
              "err": {},
              "uuid": "36b9b99f-3d81-4051-9fa7-7f55e8b4ee03",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully partial update with emptying some data",
              "fullTitle": "Partial Update Booking Successfully partial update with emptying some data",
              "timedOut": false,
              "duration": 892,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_EMPTY);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.isNull(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_EMPTY.firstname);\nassert.isNull(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_EMPTY.totalprice);\nassert.isNull(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_EMPTY.additionalneeds);",
              "err": {},
              "uuid": "154eda19-e895-429d-b7fb-8f06aab1e988",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully partial update with emptying some data",
              "fullTitle": "Partial Update Booking Successfully partial update with emptying some data",
              "timedOut": false,
              "duration": 979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_EMPTY);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.isNull(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_EMPTY.firstname);\nassert.isNull(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_EMPTY.totalprice);\nassert.isNull(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_EMPTY.additionalneeds);",
              "err": {},
              "uuid": "e5e5dc1a-c0b6-4bab-999b-645a04510497",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed partial update with invalid data",
              "fullTitle": "Partial Update Booking Failed partial update with invalid data",
              "timedOut": false,
              "duration": 951,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_INVALID_DATA);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 422);\nassert.equal(resPartialUpdate.statusText, \"Unprocessed Entity\");\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 422",
                "estack": "AssertionError: expected 200 to equal 422\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/partial-update.test.js:139:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 422\n"
              },
              "uuid": "80eab75e-8582-487f-8aea-a1ac387135ae",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed partial update with invalid data",
              "fullTitle": "Partial Update Booking Failed partial update with invalid data",
              "timedOut": false,
              "duration": 1026,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_INVALID_CHECKOUT);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 422);\nassert.equal(resPartialUpdate.statusText, \"Unprocessed Entity\");\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 422",
                "estack": "AssertionError: expected 200 to equal 422\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/partial-update.test.js:150:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 422\n"
              },
              "uuid": "635077d3-0c4e-4ed2-b114-5928f516d234",
              "parentUUID": "efbfb5bb-860d-407c-9239-46052b292c57",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "339dd53a-b7d8-4615-88e0-944d9277a53c",
            "8986b10e-9a64-472d-8591-704cac125b96",
            "c9405b02-1d10-41fb-9555-cbd8e9e0f8f6",
            "6eeebdbb-6973-466e-a5cb-dec96b2db162",
            "1af7d61b-bae4-41aa-8211-6ac6356af928",
            "57e67145-2e97-4b09-8813-9f83d40f1516",
            "6223b2fb-7268-4c1a-87f4-50a8fa85b640",
            "36b9b99f-3d81-4051-9fa7-7f55e8b4ee03",
            "154eda19-e895-429d-b7fb-8f06aab1e988",
            "e5e5dc1a-c0b6-4bab-999b-645a04510497"
          ],
          "failures": [
            "80eab75e-8582-487f-8aea-a1ac387135ae",
            "635077d3-0c4e-4ed2-b114-5928f516d234"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11443,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c4966f8a-74f2-49b0-baa7-62fe7ea9773d",
          "title": "Ping - Check Health",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\ping.test.js",
          "file": "\\test\\scenario\\ping.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Simple Health Check Endpoint is up and running",
              "fullTitle": "Ping - Check Health Verify Simple Health Check Endpoint is up and running",
              "timedOut": false,
              "duration": 955,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.ping();\nassert.equal(response.status, 201);\nassert.equal(response.statusText, \"Created\");",
              "err": {},
              "uuid": "b766f75f-1219-4a4c-85d6-aa8d560578e5",
              "parentUUID": "c4966f8a-74f2-49b0-baa7-62fe7ea9773d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b766f75f-1219-4a4c-85d6-aa8d560578e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 955,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a3051fac-2e96-4237-af64-ee2190bcd49e",
          "title": "updatebooking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\update.test.js",
          "file": "\\test\\scenario\\update.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully update booking",
              "fullTitle": "updatebooking should sucesfully update booking",
              "timedOut": false,
              "duration": 908,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let booking =  {\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}\nconst response = await herokuApi.booking(data.update_BOOKING);\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, UPDATE_SCHEMA2.JsonSchema);",
              "err": {
                "message": "AssertionError: expected 500 to equal 200",
                "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/update.test.js:28:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "bf779990-482e-41db-8f1c-48e8eeb630cf",
              "parentUUID": "a3051fac-2e96-4237-af64-ee2190bcd49e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bf779990-482e-41db-8f1c-48e8eeb630cf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 908,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}