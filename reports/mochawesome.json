{
  "stats": {
    "suites": 6,
    "tests": 17,
    "passes": 15,
    "pending": 0,
    "failures": 2,
    "start": "2023-05-14T18:04:05.893Z",
    "end": "2023-05-14T18:04:19.833Z",
    "duration": 13940,
    "testsRegistered": 17,
    "passPercent": 88.23529411764706,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "94d4a6e6-ff54-4032-ab14-b57ff4321ea5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1064,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const resGetBookingID = await herokuApi.get_booking_id();\n//console.log(resGetBookingID);\n\nglobal.bookingID = resGetBookingID.data[getRandomInt(13)].bookingid;\n//console.log(bookingID);\n//console.log(getRandomInt(13));",
          "err": {},
          "uuid": "e881dc58-06f7-4d09-9097-04ae6b1ce22e",
          "parentUUID": "94d4a6e6-ff54-4032-ab14-b57ff4321ea5",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "81062b6a-51f6-4d52-b0f7-0a5dbf2226c1",
          "title": "As a User, I want to create auth token",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\auth.test.js",
          "file": "\\test\\scenario\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully create auth token",
              "fullTitle": "As a User, I want to create auth token should sucesfully create auth token",
              "timedOut": false,
              "duration": 748,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.auth(data.VALID_AUTH);\nassert.equal(response.status, 200);\nassert.isString(response.data.token);\n       // expect(response.data).to.be.jsonSchema(shcema.AUTH_SCHEMA);\nassert.jsonSchema(response.data, shcema.AUTH_SCHEMA);",
              "err": {},
              "uuid": "a62faa6b-a955-4f30-ad66-29b2c794c461",
              "parentUUID": "81062b6a-51f6-4d52-b0f7-0a5dbf2226c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a62faa6b-a955-4f30-ad66-29b2c794c461"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 748,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8dc81235-e5b7-46c2-b7ca-3f35a4878625",
          "title": "Delete",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\delete.test.js",
          "file": "\\test\\scenario\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should sucessfull delete booking ID",
              "fullTitle": "Delete it should sucessfull delete booking ID",
              "timedOut": false,
              "duration": 747,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.delete();\nassert.equal(response.status, 201);",
              "err": {},
              "uuid": "f53621d4-37c8-482a-96ee-974905ca60e4",
              "parentUUID": "8dc81235-e5b7-46c2-b7ca-3f35a4878625",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f53621d4-37c8-482a-96ee-974905ca60e4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 747,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "abb4d26b-d743-46a5-9129-6ec540de8f1c",
          "title": "As a User, I want to get booking id",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\get.booking.id.test.js",
          "file": "\\test\\scenario\\get.booking.id.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully get booking id when insert a valid data",
              "fullTitle": "As a User, I want to get booking id should sucesfully get booking id when insert a valid data",
              "timedOut": false,
              "duration": 732,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.getBookingId();\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, shcema.BOOKINGID_SCHEMA);",
              "err": {},
              "uuid": "cb059593-847c-46e1-abdd-395635492818",
              "parentUUID": "abb4d26b-d743-46a5-9129-6ec540de8f1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb059593-847c-46e1-abdd-395635492818"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 732,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e84265b6-b3f9-46b5-a28f-0f694fc8f1d4",
          "title": "As a User, I want to get booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\get.booking.test.js",
          "file": "\\test\\scenario\\get.booking.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sucesfully get booking when insert a valid data",
              "fullTitle": "As a User, I want to get booking should sucesfully get booking when insert a valid data",
              "timedOut": false,
              "duration": 769,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.getBooking();\nassert.equal(response.status, 200);\nassert.jsonSchema(response.data, shcema.BOOKING_SCHEMA);\nconsole.log(response.data)",
              "err": {},
              "uuid": "62397d1f-7011-4ea9-8b5b-27e549caea53",
              "parentUUID": "e84265b6-b3f9-46b5-a28f-0f694fc8f1d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62397d1f-7011-4ea9-8b5b-27e549caea53"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 769,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
          "title": "Partial Update Booking",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\partial-update.test.js",
          "file": "\\test\\scenario\\partial-update.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Successfully update additional needs in current booking",
              "fullTitle": "Partial Update Booking Successfully update additional needs in current booking",
              "timedOut": false,
              "duration": 747,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_1);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_CASE_1.additionalneeds);",
              "err": {},
              "uuid": "d88faed0-7edd-4b61-9abe-fde2354ac4a8",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update firstname in current booking",
              "fullTitle": "Partial Update Booking Successfully update firstname in current booking",
              "timedOut": false,
              "duration": 781,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_2);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_2);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_CASE_2.firstname);",
              "err": {},
              "uuid": "dbdfafc7-9162-4fa7-85f1-2e5cf6f38e7b",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update lastname of in current booking",
              "fullTitle": "Partial Update Booking Successfully update lastname of in current booking",
              "timedOut": false,
              "duration": 748,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_3);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_3);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.lastname, data.PARTIAL_UPDATE_CASE_3.lastname);",
              "err": {},
              "uuid": "46e0d19c-45e2-4f41-9117-4aab4207e667",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update total price in current booking",
              "fullTitle": "Partial Update Booking Successfully update total price in current booking",
              "timedOut": false,
              "duration": 728,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_4);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_4);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_CASE_4.totalprice);",
              "err": {},
              "uuid": "9c21ed40-c466-459a-9373-bcb3d6dccbe7",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update status deposit paid in current booking",
              "fullTitle": "Partial Update Booking Successfully update status deposit paid in current booking",
              "timedOut": false,
              "duration": 754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_5);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_5);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.depositpaid, data.PARTIAL_UPDATE_CASE_5.depositpaid);",
              "err": {},
              "uuid": "033d2676-9bda-4906-ae31-44a6c9a87f58",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update dates in current booking",
              "fullTitle": "Partial Update Booking Successfully update dates in current booking",
              "timedOut": false,
              "duration": 765,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_6);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_6);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.bookingdates[0], data.PARTIAL_UPDATE_CASE_6.bookingdates[0]);\nassert.equal(resPartialUpdate.data.bookingdates[1], data.PARTIAL_UPDATE_CASE_6.bookingdates[1]);",
              "err": {},
              "uuid": "598baa30-3422-49e8-affd-cddb5dca0fe8",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update two data in current booking",
              "fullTitle": "Partial Update Booking Successfully update two data in current booking",
              "timedOut": false,
              "duration": 779,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_7.lastname);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_7);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_CASE_7.firstname);\nassert.equal(resPartialUpdate.data.lastname, data.PARTIAL_UPDATE_CASE_7.lastname);",
              "err": {},
              "uuid": "6df0447e-8d69-44ad-925e-4549e52aeb82",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully update some data in current booking",
              "fullTitle": "Partial Update Booking Successfully update some data in current booking",
              "timedOut": false,
              "duration": 730,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_CASE_8);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_CASE_8);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);\nassert.equal(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_CASE_8.totalprice);\nassert.equal(resPartialUpdate.data.depositpaid, data.PARTIAL_UPDATE_CASE_8.depositpaid);\nassert.equal(resPartialUpdate.data.bookingdates[0], data.PARTIAL_UPDATE_CASE_8.bookingdates[0]);\nassert.equal(resPartialUpdate.data.bookingdates[1], data.PARTIAL_UPDATE_CASE_8.bookingdates[1]);\nassert.equal(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_CASE_8.additionalneeds);",
              "err": {},
              "uuid": "aaffbcd6-63ac-4ea2-bea2-d1b5496d5d58",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully partial update with emptying some data",
              "fullTitle": "Partial Update Booking Successfully partial update with emptying some data",
              "timedOut": false,
              "duration": 814,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_EMPTY);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.isNull(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_EMPTY.firstname);\nassert.isNull(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_EMPTY.totalprice);\nassert.isNull(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_EMPTY.additionalneeds);",
              "err": {},
              "uuid": "3686c9ef-03e7-492c-bcc4-8fe7bee82e3a",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Successfully partial update with emptying some data",
              "fullTitle": "Partial Update Booking Successfully partial update with emptying some data",
              "timedOut": false,
              "duration": 754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_EMPTY);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 200);\nassert.isNull(resPartialUpdate.data.firstname, data.PARTIAL_UPDATE_EMPTY.firstname);\nassert.isNull(resPartialUpdate.data.totalprice, data.PARTIAL_UPDATE_EMPTY.totalprice);\nassert.isNull(resPartialUpdate.data.additionalneeds, data.PARTIAL_UPDATE_EMPTY.additionalneeds);",
              "err": {},
              "uuid": "c44cdaf3-0edd-42fe-a328-8f36c34e7f9d",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed partial update with invalid data",
              "fullTitle": "Partial Update Booking Failed partial update with invalid data",
              "timedOut": false,
              "duration": 756,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_INVALID_DATA);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 422);\nassert.equal(resPartialUpdate.statusText, \"Unprocessed Entity\");\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 422",
                "estack": "AssertionError: expected 200 to equal 422\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/partial-update.test.js:139:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 422\n"
              },
              "uuid": "4b2fd43a-7935-4af3-b7fb-f8229e62d79c",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed partial update with invalid data",
              "fullTitle": "Partial Update Booking Failed partial update with invalid data",
              "timedOut": false,
              "duration": 767,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//console.log(data.PARTIAL_UPDATE_EMPTY);\nconst resPartialUpdate = await herokuApi.partial_update(data.PARTIAL_UPDATE_INVALID_CHECKOUT);\n//console.log(resPartialUpdate);\nassert.equal(resPartialUpdate.status, 422);\nassert.equal(resPartialUpdate.statusText, \"Unprocessed Entity\");\nassert.jsonSchema(resPartialUpdate.data, schema.UPDATE_SCHEMA);",
              "err": {
                "message": "AssertionError: expected 200 to equal 422",
                "estack": "AssertionError: expected 200 to equal 422\n    at Context.<anonymous> (file:///E:/QA/Automation/NEST/API/batch9/test/scenario/partial-update.test.js:150:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": "- 200\n+ 422\n"
              },
              "uuid": "31ea66ac-cfe5-46b5-8f9c-5226cd2e1a06",
              "parentUUID": "fd79d2bb-debd-4fa4-8aaf-2d540e269cd6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d88faed0-7edd-4b61-9abe-fde2354ac4a8",
            "dbdfafc7-9162-4fa7-85f1-2e5cf6f38e7b",
            "46e0d19c-45e2-4f41-9117-4aab4207e667",
            "9c21ed40-c466-459a-9373-bcb3d6dccbe7",
            "033d2676-9bda-4906-ae31-44a6c9a87f58",
            "598baa30-3422-49e8-affd-cddb5dca0fe8",
            "6df0447e-8d69-44ad-925e-4549e52aeb82",
            "aaffbcd6-63ac-4ea2-bea2-d1b5496d5d58",
            "3686c9ef-03e7-492c-bcc4-8fe7bee82e3a",
            "c44cdaf3-0edd-42fe-a328-8f36c34e7f9d"
          ],
          "failures": [
            "4b2fd43a-7935-4af3-b7fb-f8229e62d79c",
            "31ea66ac-cfe5-46b5-8f9c-5226cd2e1a06"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8f399fd5-052e-48f2-b43d-43f0884a3191",
          "title": "Ping - Check Health",
          "fullFile": "E:\\QA\\Automation\\NEST\\API\\batch9\\test\\scenario\\ping.test.js",
          "file": "\\test\\scenario\\ping.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify Simple Health Check Endpoint is up and running",
              "fullTitle": "Ping - Check Health Verify Simple Health Check Endpoint is up and running",
              "timedOut": false,
              "duration": 733,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await herokuApi.ping();\nassert.equal(response.status, 201);\nassert.equal(response.statusText, \"Created\");",
              "err": {},
              "uuid": "eee3c871-e886-4b43-9cd1-d841ae2d8847",
              "parentUUID": "8f399fd5-052e-48f2-b43d-43f0884a3191",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eee3c871-e886-4b43-9cd1-d841ae2d8847"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 733,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}